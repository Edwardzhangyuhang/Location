package com.foxconn.cnsbg.escort.subsys.dao;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table USER_ENTITY.
 */
public class UserEntity {

    private Long id;
    private Float hourDistance;
    private Float totalDistance;
    private String username;
    private Long locationId;
    private Long friendId;
    private Long inviteId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserEntityDao myDao;

    private LocationEntity lastLocation;
    private Long lastLocation__resolvedKey;

    private MainUserEntity friend;
    private Long friend__resolvedKey;

    private MainUserEntity invite;
    private Long invite__resolvedKey;

    private List<LocationEntity> locations;

    public UserEntity() {
    }

    public UserEntity(Long id) {
        this.id = id;
    }

    public UserEntity(Long id, Float hourDistance, Float totalDistance, String username, Long locationId, Long friendId, Long inviteId) {
        this.id = id;
        this.hourDistance = hourDistance;
        this.totalDistance = totalDistance;
        this.username = username;
        this.locationId = locationId;
        this.friendId = friendId;
        this.inviteId = inviteId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserEntityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Float getHourDistance() {
        return hourDistance;
    }

    public void setHourDistance(Float hourDistance) {
        this.hourDistance = hourDistance;
    }

    public Float getTotalDistance() {
        return totalDistance;
    }

    public void setTotalDistance(Float totalDistance) {
        this.totalDistance = totalDistance;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public Long getLocationId() {
        return locationId;
    }

    public void setLocationId(Long locationId) {
        this.locationId = locationId;
    }

    public Long getFriendId() {
        return friendId;
    }

    public void setFriendId(Long friendId) {
        this.friendId = friendId;
    }

    public Long getInviteId() {
        return inviteId;
    }

    public void setInviteId(Long inviteId) {
        this.inviteId = inviteId;
    }

    /** To-one relationship, resolved on first access. */
    public LocationEntity getLastLocation() {
        Long __key = this.locationId;
        if (lastLocation__resolvedKey == null || !lastLocation__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LocationEntityDao targetDao = daoSession.getLocationEntityDao();
            LocationEntity lastLocationNew = targetDao.load(__key);
            synchronized (this) {
                lastLocation = lastLocationNew;
            	lastLocation__resolvedKey = __key;
            }
        }
        return lastLocation;
    }

    public void setLastLocation(LocationEntity lastLocation) {
        synchronized (this) {
            this.lastLocation = lastLocation;
            locationId = lastLocation == null ? null : lastLocation.getId();
            lastLocation__resolvedKey = locationId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public MainUserEntity getFriend() {
        Long __key = this.friendId;
        if (friend__resolvedKey == null || !friend__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MainUserEntityDao targetDao = daoSession.getMainUserEntityDao();
            MainUserEntity friendNew = targetDao.load(__key);
            synchronized (this) {
                friend = friendNew;
            	friend__resolvedKey = __key;
            }
        }
        return friend;
    }

    public void setFriend(MainUserEntity friend) {
        synchronized (this) {
            this.friend = friend;
            friendId = friend == null ? null : friend.getId();
            friend__resolvedKey = friendId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public MainUserEntity getInvite() {
        Long __key = this.inviteId;
        if (invite__resolvedKey == null || !invite__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MainUserEntityDao targetDao = daoSession.getMainUserEntityDao();
            MainUserEntity inviteNew = targetDao.load(__key);
            synchronized (this) {
                invite = inviteNew;
            	invite__resolvedKey = __key;
            }
        }
        return invite;
    }

    public void setInvite(MainUserEntity invite) {
        synchronized (this) {
            this.invite = invite;
            inviteId = invite == null ? null : invite.getId();
            invite__resolvedKey = inviteId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<LocationEntity> getLocations() {
        if (locations == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LocationEntityDao targetDao = daoSession.getLocationEntityDao();
            List<LocationEntity> locationsNew = targetDao._queryUserEntity_Locations(id);
            synchronized (this) {
                if(locations == null) {
                    locations = locationsNew;
                }
            }
        }
        return locations;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLocations() {
        locations = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
