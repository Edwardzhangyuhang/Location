package com.foxconn.cnsbg.escort.subsys.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_ENTITY.
*/
public class UserEntityDao extends AbstractDao<UserEntity, Long> {

    public static final String TABLENAME = "USER_ENTITY";

    /**
     * Properties of entity UserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property HourDistance = new Property(1, Float.class, "hourDistance", false, "HOUR_DISTANCE");
        public final static Property TotalDistance = new Property(2, Float.class, "totalDistance", false, "TOTAL_DISTANCE");
        public final static Property Username = new Property(3, String.class, "username", false, "USERNAME");
        public final static Property LocationId = new Property(4, Long.class, "locationId", false, "LOCATION_ID");
        public final static Property FriendId = new Property(5, Long.class, "friendId", false, "FRIEND_ID");
        public final static Property InviteId = new Property(6, Long.class, "inviteId", false, "INVITE_ID");
    };

    private DaoSession daoSession;

    private Query<UserEntity> mainUserEntity_FriendsQuery;
    private Query<UserEntity> mainUserEntity_InvitesQuery;

    public UserEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'HOUR_DISTANCE' REAL," + // 1: hourDistance
                "'TOTAL_DISTANCE' REAL," + // 2: totalDistance
                "'USERNAME' TEXT," + // 3: username
                "'LOCATION_ID' INTEGER," + // 4: locationId
                "'FRIEND_ID' INTEGER," + // 5: friendId
                "'INVITE_ID' INTEGER);"); // 6: inviteId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Float hourDistance = entity.getHourDistance();
        if (hourDistance != null) {
            stmt.bindDouble(2, hourDistance);
        }
 
        Float totalDistance = entity.getTotalDistance();
        if (totalDistance != null) {
            stmt.bindDouble(3, totalDistance);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        Long locationId = entity.getLocationId();
        if (locationId != null) {
            stmt.bindLong(5, locationId);
        }
 
        Long friendId = entity.getFriendId();
        if (friendId != null) {
            stmt.bindLong(6, friendId);
        }
 
        Long inviteId = entity.getInviteId();
        if (inviteId != null) {
            stmt.bindLong(7, inviteId);
        }
    }

    @Override
    protected void attachEntity(UserEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserEntity readEntity(Cursor cursor, int offset) {
        UserEntity entity = new UserEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1), // hourDistance
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // totalDistance
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // username
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // locationId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // friendId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // inviteId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHourDistance(cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1));
        entity.setTotalDistance(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setUsername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLocationId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setFriendId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setInviteId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "friends" to-many relationship of MainUserEntity. */
    public List<UserEntity> _queryMainUserEntity_Friends(Long friendId) {
        synchronized (this) {
            if (mainUserEntity_FriendsQuery == null) {
                QueryBuilder<UserEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.FriendId.eq(null));
                queryBuilder.orderRaw("USERNAME ASC");
                mainUserEntity_FriendsQuery = queryBuilder.build();
            }
        }
        Query<UserEntity> query = mainUserEntity_FriendsQuery.forCurrentThread();
        query.setParameter(0, friendId);
        return query.list();
    }

    /** Internal query to resolve the "invites" to-many relationship of MainUserEntity. */
    public List<UserEntity> _queryMainUserEntity_Invites(Long inviteId) {
        synchronized (this) {
            if (mainUserEntity_InvitesQuery == null) {
                QueryBuilder<UserEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.InviteId.eq(null));
                queryBuilder.orderRaw("USERNAME ASC");
                mainUserEntity_InvitesQuery = queryBuilder.build();
            }
        }
        Query<UserEntity> query = mainUserEntity_InvitesQuery.forCurrentThread();
        query.setParameter(0, inviteId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getLocationEntityDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getMainUserEntityDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getMainUserEntityDao().getAllColumns());
            builder.append(" FROM USER_ENTITY T");
            builder.append(" LEFT JOIN LOCATION_ENTITY T0 ON T.'LOCATION_ID'=T0.'_id'");
            builder.append(" LEFT JOIN MAIN_USER_ENTITY T1 ON T.'FRIEND_ID'=T1.'_id'");
            builder.append(" LEFT JOIN MAIN_USER_ENTITY T2 ON T.'INVITE_ID'=T2.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected UserEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        UserEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        LocationEntity lastLocation = loadCurrentOther(daoSession.getLocationEntityDao(), cursor, offset);
        entity.setLastLocation(lastLocation);
        offset += daoSession.getLocationEntityDao().getAllColumns().length;

        MainUserEntity friend = loadCurrentOther(daoSession.getMainUserEntityDao(), cursor, offset);
        entity.setFriend(friend);
        offset += daoSession.getMainUserEntityDao().getAllColumns().length;

        MainUserEntity invite = loadCurrentOther(daoSession.getMainUserEntityDao(), cursor, offset);
        entity.setInvite(invite);

        return entity;    
    }

    public UserEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<UserEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<UserEntity> list = new ArrayList<UserEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<UserEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<UserEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
