package com.foxconn.cnsbg.escort.subsys.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CACHED_ACCELERATION_ENTITY.
*/
public class CachedAccelerationEntityDao extends AbstractDao<CachedAccelerationEntity, Long> {

    public static final String TABLENAME = "CACHED_ACCELERATION_ENTITY";

    /**
     * Properties of entity CachedAccelerationEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UDID = new Property(1, String.class, "UDID", false, "UDID");
        public final static Property Datetimestamp = new Property(2, Long.class, "datetimestamp", false, "DATETIMESTAMP");
        public final static Property AccelX_avg = new Property(3, Float.class, "accelX_avg", false, "ACCEL_X_AVG");
        public final static Property AccelY_avg = new Property(4, Float.class, "accelY_avg", false, "ACCEL_Y_AVG");
        public final static Property AccelZ_avg = new Property(5, Float.class, "accelZ_avg", false, "ACCEL_Z_AVG");
        public final static Property AccelX_stddev = new Property(6, Double.class, "accelX_stddev", false, "ACCEL_X_STDDEV");
        public final static Property AccelY_stddev = new Property(7, Double.class, "accelY_stddev", false, "ACCEL_Y_STDDEV");
        public final static Property AccelZ_stddev = new Property(8, Double.class, "accelZ_stddev", false, "ACCEL_Z_STDDEV");
    };


    public CachedAccelerationEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CachedAccelerationEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CACHED_ACCELERATION_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'UDID' TEXT," + // 1: UDID
                "'DATETIMESTAMP' INTEGER," + // 2: datetimestamp
                "'ACCEL_X_AVG' REAL," + // 3: accelX_avg
                "'ACCEL_Y_AVG' REAL," + // 4: accelY_avg
                "'ACCEL_Z_AVG' REAL," + // 5: accelZ_avg
                "'ACCEL_X_STDDEV' REAL," + // 6: accelX_stddev
                "'ACCEL_Y_STDDEV' REAL," + // 7: accelY_stddev
                "'ACCEL_Z_STDDEV' REAL);"); // 8: accelZ_stddev
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CACHED_ACCELERATION_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CachedAccelerationEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String UDID = entity.getUDID();
        if (UDID != null) {
            stmt.bindString(2, UDID);
        }
 
        Long datetimestamp = entity.getDatetimestamp();
        if (datetimestamp != null) {
            stmt.bindLong(3, datetimestamp);
        }
 
        Float accelX_avg = entity.getAccelX_avg();
        if (accelX_avg != null) {
            stmt.bindDouble(4, accelX_avg);
        }
 
        Float accelY_avg = entity.getAccelY_avg();
        if (accelY_avg != null) {
            stmt.bindDouble(5, accelY_avg);
        }
 
        Float accelZ_avg = entity.getAccelZ_avg();
        if (accelZ_avg != null) {
            stmt.bindDouble(6, accelZ_avg);
        }
 
        Double accelX_stddev = entity.getAccelX_stddev();
        if (accelX_stddev != null) {
            stmt.bindDouble(7, accelX_stddev);
        }
 
        Double accelY_stddev = entity.getAccelY_stddev();
        if (accelY_stddev != null) {
            stmt.bindDouble(8, accelY_stddev);
        }
 
        Double accelZ_stddev = entity.getAccelZ_stddev();
        if (accelZ_stddev != null) {
            stmt.bindDouble(9, accelZ_stddev);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CachedAccelerationEntity readEntity(Cursor cursor, int offset) {
        CachedAccelerationEntity entity = new CachedAccelerationEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UDID
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // datetimestamp
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // accelX_avg
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // accelY_avg
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // accelZ_avg
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // accelX_stddev
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // accelY_stddev
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8) // accelZ_stddev
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CachedAccelerationEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUDID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDatetimestamp(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setAccelX_avg(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setAccelY_avg(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setAccelZ_avg(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setAccelX_stddev(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setAccelY_stddev(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setAccelZ_stddev(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CachedAccelerationEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CachedAccelerationEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
