package com.foxconn.cnsbg.escort.subsys.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.foxconn.cnsbg.escort.subsys.dao.CachedLocData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CACHED_LOC_DATA.
*/
public class CachedLocDataDao extends AbstractDao<CachedLocData, Long> {

    public static final String TABLENAME = "CACHED_LOC_DATA";

    /**
     * Properties of entity CachedLocData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceID = new Property(1, String.class, "deviceID", false, "DEVICE_ID");
        public final static Property CarID = new Property(2, String.class, "carID", false, "CAR_ID");
        public final static Property Time = new Property(3, java.util.Date.class, "time", false, "TIME");
        public final static Property Latitude = new Property(4, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(5, Double.class, "longitude", false, "LONGITUDE");
        public final static Property Provider = new Property(6, String.class, "provider", false, "PROVIDER");
        public final static Property Accuracy = new Property(7, Float.class, "accuracy", false, "ACCURACY");
        public final static Property Altitude = new Property(8, Double.class, "altitude", false, "ALTITUDE");
        public final static Property Bearing = new Property(9, Float.class, "bearing", false, "BEARING");
        public final static Property Speed = new Property(10, Float.class, "speed", false, "SPEED");
        public final static Property Mock = new Property(11, Boolean.class, "mock", false, "MOCK");
        public final static Property BatteryLevel = new Property(12, Integer.class, "batteryLevel", false, "BATTERY_LEVEL");
        public final static Property SignalStrength = new Property(13, Integer.class, "signalStrength", false, "SIGNAL_STRENGTH");
        public final static Property LockStatus = new Property(14, String.class, "lockStatus", false, "LOCK_STATUS");
        public final static Property DoorStatus = new Property(15, String.class, "doorStatus", false, "DOOR_STATUS");
    };


    public CachedLocDataDao(DaoConfig config) {
        super(config);
    }
    
    public CachedLocDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CACHED_LOC_DATA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DEVICE_ID' TEXT," + // 1: deviceID
                "'CAR_ID' TEXT," + // 2: carID
                "'TIME' INTEGER," + // 3: time
                "'LATITUDE' REAL," + // 4: latitude
                "'LONGITUDE' REAL," + // 5: longitude
                "'PROVIDER' TEXT," + // 6: provider
                "'ACCURACY' REAL," + // 7: accuracy
                "'ALTITUDE' REAL," + // 8: altitude
                "'BEARING' REAL," + // 9: bearing
                "'SPEED' REAL," + // 10: speed
                "'MOCK' INTEGER," + // 11: mock
                "'BATTERY_LEVEL' INTEGER," + // 12: batteryLevel
                "'SIGNAL_STRENGTH' INTEGER," + // 13: signalStrength
                "'LOCK_STATUS' TEXT," + // 14: lockStatus
                "'DOOR_STATUS' TEXT);"); // 15: doorStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CACHED_LOC_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CachedLocData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceID = entity.getDeviceID();
        if (deviceID != null) {
            stmt.bindString(2, deviceID);
        }
 
        String carID = entity.getCarID();
        if (carID != null) {
            stmt.bindString(3, carID);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(4, time.getTime());
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(5, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(6, longitude);
        }
 
        String provider = entity.getProvider();
        if (provider != null) {
            stmt.bindString(7, provider);
        }
 
        Float accuracy = entity.getAccuracy();
        if (accuracy != null) {
            stmt.bindDouble(8, accuracy);
        }
 
        Double altitude = entity.getAltitude();
        if (altitude != null) {
            stmt.bindDouble(9, altitude);
        }
 
        Float bearing = entity.getBearing();
        if (bearing != null) {
            stmt.bindDouble(10, bearing);
        }
 
        Float speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindDouble(11, speed);
        }
 
        Boolean mock = entity.getMock();
        if (mock != null) {
            stmt.bindLong(12, mock ? 1l: 0l);
        }
 
        Integer batteryLevel = entity.getBatteryLevel();
        if (batteryLevel != null) {
            stmt.bindLong(13, batteryLevel);
        }
 
        Integer signalStrength = entity.getSignalStrength();
        if (signalStrength != null) {
            stmt.bindLong(14, signalStrength);
        }
 
        String lockStatus = entity.getLockStatus();
        if (lockStatus != null) {
            stmt.bindString(15, lockStatus);
        }
 
        String doorStatus = entity.getDoorStatus();
        if (doorStatus != null) {
            stmt.bindString(16, doorStatus);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CachedLocData readEntity(Cursor cursor, int offset) {
        CachedLocData entity = new CachedLocData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // carID
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // time
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // latitude
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // longitude
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // provider
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // accuracy
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // altitude
            cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9), // bearing
            cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10), // speed
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // mock
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // batteryLevel
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // signalStrength
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // lockStatus
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // doorStatus
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CachedLocData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCarID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setLatitude(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setLongitude(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setProvider(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAccuracy(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setAltitude(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setBearing(cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9));
        entity.setSpeed(cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10));
        entity.setMock(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setBatteryLevel(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setSignalStrength(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setLockStatus(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDoorStatus(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CachedLocData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CachedLocData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
